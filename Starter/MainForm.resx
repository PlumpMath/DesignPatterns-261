<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABTU1ICVFRUD1RUVBJUVFQSVFRUElRUVBJUVFQSVFRUElRUVBBUVFQFAAAAAAAA
        AAAAAAAAAAAAAFVUVAZUVFQRVFRUElRUVBJUVFQSVFRUElRUVBJUVFQOUlJSAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGtkWy2diGy9nYdrxJ2Ha8Sch2rEnIdqxJyGacSchmnEj31lrFVV
        VBgAAAAAAAAAAAAAAAAAAAAAem1dTJuEZcCahGXEmoRkxJqDZMSag2TEmoNjxIJzXpxUVFQQAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe29hQtKuf//SrX7/0q19/9GsfP/RrHv/0ax6/9Gr
        ev91a15zVlVUBAAAAAAAAAAAAAAAAAAAAABwZ1sIu5pu1s6ncv/Op3L/zqZx/86mcP/Npm//pIpmzlRU
        VBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB7cGFC06+A/9Ouf//Srn7/0q1+/9Kt
        ff/RrHz/wqF271RUVCsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUgGR8z6h0/86nc//Op3L/zqdx/86m
        cf+kimbOVFRUFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHtwYkLTsIL/06+B/9Ov
        gP/Srn//0q5+/9Ktff+2mXTkVFRUJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIV1YWXPqXX/z6h0/8+o
        c//Op3P/zqdy/6SLZ85UVFQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe3BiQtSw
        g//UsIL/06+C/9Ovgf/TroD/0q5//8ime/ZVVVRHUVFRAQAAAAAAAAAAAAAAAAAAAABTUlEClIFmk9Cp
        dv/PqXb/z6h1/8+odP/PqHP/pYtozlRUVBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAB7cWNC1LGF/9SxhP/UsIP/1LCC/9Ovgf/Tr4D/066A/4V3ZKxUVFQeT09PAQAAAAAAAAAAT09PAV1a
        Vi3FonXs0Kp4/9Cqd//QqXb/z6l1/8+odf+ljGnOVFRUFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAHxxZELVsof/1bKG/9Sxhf/UsYT/1LCD/9Owgv/Tr4H/zqt/+4F0Y6ZUVFQ+VFRUG1RU
        VB1jX1lPtphy19Grev/Rq3n/0Kp4/9CqeP/Qqnf/z6l2/6aMas5UVFQVVFRUCFRUVBJUVFQQVFRUBQAA
        AAAAAAAAAAAAAAAAAAAAAAAAfHFkQtazif/Vs4j/1bKG/9Wxhf/UsYT/1LCE/9Swg//Tr4L/06+B/sCh
        eu+pkXHUspdz3M+rfPvSrXz/0ax8/9Gse//Rq3r/0Kt5/9CqeP/Qqnf/poxr0mBcV1SQfWSmo4tpy5eB
        Zb1qY1l4VFRUIFFRUQEAAAAAAAAAAAAAAAB8cmVC0rGJ96OPdamQgGxymIZvfbuffMzUsYX+1LGE/9Sw
        g//UsIL/06+C/9Ovgf/TroD/0q5//9Ktfv/SrX3/0qx8/9Gse//RrHv/0at6/9Cref+8nHLwx6R199Cp
        dv/PqXb/z6h1/82ndP2GdmGuVFRUHwAAAAAAAAAAAAAAAH5zZidwaWA8W1lXBQAAAAAAAAAAbmdeBaCM
        coXVsob/1LGF/9SxhP/UsIP/1LCC/9Ovgf/Tr4D/065//9Kuf//SrX7/0q19/9GsfP/RrHv/0at6/9Gr
        ef/Qq3n/0Kp4/9Cqd//QqXb/z6l1/8yndP1nYVlyU1NTBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAa2VdA7ece8HVsof/1bKG/9Sxhf/UsYT/1LCD/9Owgv/Tr4H/06+A/9Ouf//Srn7/0q19/9Kt
        ff/RrHz/0ax7/9Grev/Rq3n/0Kp4/9CqeP/Qqnf/z6l2/5J+ZbVUVFQOAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAkYFtaNazif/Vs4j/1bKG/9Wxhf/UsYT/1LCD/9Swg//Tr4L/06+B/9Ou
        gP/Srn//0q5+/9Ktff/SrXz/0ax8/9Gse//Rq3r/0Kt5/9CqeP/Qqnf/m4VowFRUVA8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACGeWlX1rWL/9a0iv/Vs4j/1bOH/9Wyhv/UsYX/1LGE/9Sw
        g//UsIL/06+B/9Ovgf/TroD/0q5//9Ktfv/SrX3/0qx8/9Gse//RrHr/0at6/9Cref+IeGOWVFRUBgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU1JRApSEcInXto3/17WM/9a1i//WtIn/1bOI/9Wy
        h//Vsob/1LGF/9SxhP/UsIP/07CC/9Ovgf/Tr4D/065//9Kuf//SrX7/0q19/9GsfP/RrHv/w6J261xa
        VjAAAAAAAAAAAAAAAABZWFYIVFRUFFFRUQIAAAAAAAAAAFBQUAFdW1gsyq2K6di3j//Xt47/17aN/9e1
        i//WtIr/1rSJ/9WziP/Vsof/1bKF/9Sxhf/UsIT/1LCD/9Owgv+xlnXbr5VzwdKuf/7Srn7/0q19/72e
        dttrZFtFV1ZUAgAAAAAAAAAAAAAAAHtyaD+UhnawV1ZVTVRUVCNUVFQjaGNeV72lh9nZuZP/2bmS/9i4
        kP/Yt4//17aO/9e2jP/WtYv/1rSK/9azif/Vs4f/1bKG/9Wxhf/UsYT/1LCD/6iRc85YV1UXfHFiLoZ4
        ZVd7cGFDXltXDVZUUgEAAAAAAAAAAAAAAAAAAAAAfnVrQty/nf/Rtpb2uaOJ38GojOXZu5f92ryX/9q7
        lf/ZupT/2bmT/9i4kf/YuJD/2LeP/9e2jf/XtYz/1rWL/9a0iv/Vs4j/1bKH/9Wyhv/UsYX/qZF0zlRU
        VBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB+dmtC3cGg/93Anv/cv53/3L6b/9u+
        mv/bvZn/2ryX/9q7lv/au5X/2bqT/9m5kv/YuJH/2LeQ/9e3jv/Xto3/17WM/9a0iv/WtIn/1bOI/9Wy
        h/+pknXOVFRUFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH92bELewqL/3sGh/93B
        n//dwJ7/3L+c/9y+m//bvZr/272Y/9q8l//au5b/2bqU/9m6k//ZuZL/2LiQ/9i3j//Xto7/17aN/9a1
        i//WtIr/1rSJ/6qTds5UVFQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf3ZtQt/E
        pP/ew6P/3sKi/93BoP/dwJ//3MCd/9y/nP/cvpv/272Z/9u8mP/avJf/2ruV/9m6lP/ZuZP/2LmR/9i4
        kP/Yt4//17aO/9e2jP/WtYv/qpR4zlRUVBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAB/d25A4MWn/9/Epf/fw6T/3sOj/97Cof/dwaD/3cCe/9y/nf/cv5z/276a/9u9mf/bvJj/2ruW/9q7
        lf/ZupT/2bmS/9i4kf/YuJD/2LeP/9e2jf+rlXnJVFRUEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAHx0bBCGfXJLgnlvTYJ5b02CeW5NgnhuTYF4bU19dWtPlol4mtzAnv7cv53/3L6b/9u+
        mv/bvZn/vqaJ63ZuZHh8c2dOgHVoTYB1aE1/dWhNf3RnTXRsYjhYV1UDAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFpZVw7Ms5fh3cGg/93B
        n//dwJ7/3L+c/9y+m//bvZr/e3JokVRUVAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeHFpPt/E
        pP7ew6P/3sKh/93BoP/dwJ//3MCd/9y/nP+oloDLVFRUFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACBeG9J4MWn/9/Epf/fw6T/3sOi/97Cof/dwaD/3cCe/7KehtFUVFQVAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAHNtZhvexaj54Mao/9/Fpv/fxKX/38Oj/97Cov/ewqH/l4l5pFRUVAgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAZGBcAa2dipLhx6r/4Map/+DFp//fxab/38Sk/9G4nO1gXls1AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAenNsBqycio7dxan24ceq/+DGqP7DrpbSbmljQldW
        VgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaGNeAXVvaBSFfHI9dnBpLl9d
        WgkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////4AeAP+AHgD/gB4A/4A/AP+APwD/gB4A/4AMAP+AAAAPgAAAA4AA
        AAOMAAAB/gAAAf8AAAH/AAAB/gAAA4wAAAOAAAAHgAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD//wA///8A
        P///AD///wA///8Af///gH///8H///////8=
</value>
  </data>
</root>